
🎯  핵심 개념
1️⃣ 생물학 기초 개념 (필수!)멘델 유전 법칙
    - 이 프로젝트는 멘델의 유전 법칙을 기반

    ✅ 분리의 법칙 (Law of Segregation)
    - 부모의 대립유전자가 분리되어 배우자로 전달
    - 예: Dd → 배우자에 D 또는 d
    
    ✅ 독립의 법칙 (Law of Independent Assortment)  
    - 각 형질은 독립적으로 유전
    - 머리카락 색과 보조개는 서로 영향 없음

유전자형 vs 표현형
    ✅ 유전자형 (Genotype)
    - DNA에 기록된 유전정보
    - 예: DD, Dd, dd
    
    ✅ 표현형 (Phenotype)  
    - 실제로 나타나는 특성
    - 예: 곱슬머리, 직모
    
    핵심 개념:
    DD와 Dd는 다른 유전자형이지만
    같은 표현형(곱슬머리)을 보임
    → 이것이 우성의 원리!
      ## 유전자형 DD와 Dd는 모두 곱슬머리라는 동일한 표현형을 보임. 이는 D(곱슬) 대립유전자가 d(직모)에 대해 우성이기 때문


2️⃣ 심화 생물학 개념 
  완전 우성 vs 불완전 우성
    ✅ 완전 우성 (Complete Dominance)
    - 이 프로젝트에서 주로 사용
    - Dd = DD (표현형 동일)
    - 예: 보조개
    
    ✅ 불완전 우성 (Incomplete Dominance)  
    - 중간 표현형
    - 예: 분홍 꽃 (빨강 + 흰색)
        ## 실제로는 불완전 우성, 공동 우성 등 더 복잡하지만, 이 프로젝트는 완전 우성 모델을 사용
  
  단일 유전자 vs 다인자 유전
  ✅ 단일 유전자 형질 (Single Gene Trait)
  - 하나의 유전자로 결정
  - 명확한 우성/열성
  - 예: 보조개, 쌍꺼풀, 귓볼
  
  ✅ 다인자 유전 (Polygenic Inheritance)
  - 여러 유전자가 관여
  - 연속적 변이
  - 예: 키, 피부색, 지능
  
###  "키와 피부색은 다인자 유전으로, 단순 멘델 법칙만으로는 설명할 수 없다. 이 프로젝트에서는 중간값 모델을 사용하여 경향성을 예측.

******  환경의 영향  ******** 중요 
  이 프로젝트는 순수 유전적 요소만 고려했음
  
  순수 유전만으로 결정되지 않는 형질:
  - 키: 영양, 운동, 질병
  - 피부색: 자외선 노출
  - 근육량: 운동, 식습관
  
  한계점:
  이 프로그램은 유전적 잠재력만 예측하며, 환경 요인은 고려하지 않았음


3️⃣ 의학적 연관성
이 프로젝트는 유전 상담(Genetic Counseling)의 기초 원리를 구현한 것
  🏥 실제 의료 현장 적용:
  1. 유전 질환 예측
     - 낭포성 섬유증 (Cystic Fibrosis)
     - 겸상 적혈구 빈혈 (Sickle Cell Anemia)
     - 헌팅턴병 (Huntington's Disease)
  
  2. 보인자 검사
     - 부모가 보인자(Dd)인 경우
     - 자녀의 발병 확률 계산
  
  3. 산전 진단
     - 양수 검사
     - 융모막 검사

    ### 부모의 유전자 정보를 바탕으로 자녀의 유전 질환 가능성을 계산이 가능한 이 프로그램은 그 기본 원리를 일반 형질에 적용한 것

*************** 윤리적 고려사항 ****************
  ✅ 유전자 정보의 오용 가능성
  - 유전자 차별 금지법 (GINA)
  - 보험 가입 차별
  - 고용 차별
  
  ✅ 이 프로그램의 윤리적 접근:
  - 교육 목적
  - 질병이 아닌 일반 형질
  - 확률적 예측 (확정 아님)
  - 개인정보 보호


>> 추후 컴퓨터 비전 기술을 활용한 AI 분석 구현 가능
=======================================================
=======================================================
=======================================================


🧬 유전 형질 예측 프로그램 정리

전체 프로젝트 단계
  1단계: 개념 설계
  2단계: 환경 설정
  3단계: 코드 작성
  4단계: 로컬 테스트
  5단계: 배포

1️⃣ 개념 설계
목표
  부모의 유전 형질 입력 → 자녀의 형질 예측
  Punnett Square (멘델 유전 법칙) 활용

형질 선택
  단일 유전자 형질: 머리카락, 보조개, 쌍꺼풀 등
  다인자 유전: 키, 피부색

유전자형 시스템
  DD: 동형접합 우성 (가족 모두 우성)
  Dd: 이형접합 (혼합)
  dd: 동형접합 열성 (열성 형질)

2️⃣ 환경 설정 (경로는 예시)
Conda 가상환경 생성
  # 가상환경 생성
  conda create -n genetics_env python=3.9 -y
  # 가상환경 활성화
  conda activate genetics_env
  # Streamlit 설치
  pip install streamlit

프로젝트 폴더 구조
  genetics_project/
  ├── genetics_app.py      # 메인 프로그램
  └── requirements.txt     # 패키지 목록

3️⃣ 코드 성명
📄 genetics_app.py (전체 구조)
  1. 라이브러리 임포트
  pythonimport streamlit as st
  from collections import Counter
------------
    #  streamlit: 웹 UI 생성
    #  Counter: 유전자형 확률 계산에 사용


  2. 페이지 설정
    st.set_page_config(
        page_title="유전 형질 예측",
        page_icon="🧬",
        layout="wide"
    )
-------------
      # 브라우저 탭 제목과 아이콘 설정
      # layout="wide": 넓은 레이아웃 사용


  3. 커스텀 CSS
    st.markdown("""
    <style>
        .main {
            padding: 2rem;
        }
        .stButton>button {
            width: 100%;
            height: 3rem;
            font-size: 1.1rem;
        }
        h1 {
            color: #1f77b4;
        }
    </style>
    """, unsafe_allow_html=True)
---------------------
      # HTML/CSS로 디자인 커스터마이징
      # 버튼 크기, 제목 색상 등 스타일 적용


  4. 형질 데이터 정의
    traits_data = [
        {
            'id': 'hair_texture',              # 고유 ID
            'name': '머리카락 모양',            # 표시 이름
            'dominant': '곱슬머리',            # 우성 형질
            'recessive': '직모',               # 열성 형질
            'options': {                       # 선택지와 유전자형
                '곱슬머리 (가족 모두 곱슬)': 'DD',
                '곱슬머리 (가족 중 직모도 있음)': 'Dd',
                '직모': 'dd'
            }
        },
        # ... 다른 형질들
    ]
--------------------
      #각 형질을 딕셔너리로 정의
      #id: 프로그램 내부에서 사용하는 키
      # options: 사용자가 선택할 수 있는 옵션과 해당 유전자형


  5. Punnett Square 계산 함수
    def punnett_square(g1, g2):
        """
        부모의 유전자형으로 자녀의 가능한 유전자형 계산
        
        매개변수:
            g1: 부모1의 유전자형 (예: 'DD', 'Dd', 'dd')
            g2: 부모2의 유전자형
        
        반환값:
            자녀의 가능한 유전자형 리스트 (4가지)
        """
        # 다인자 유전 형질인 경우
        if g1 in ['tall', 'medium', 'short', 'dark', 'light']:
            return predict_polygenic(g1, g2)
        
        # 단일 유전자 형질 계산
        outcomes = []
        for a1 in g1:              # 부모1의 대립유전자
            for a2 in g2:          # 부모2의 대립유전자
                # 알파벳 순서로 정렬 (D가 d보다 앞)
                genotype = ''.join(sorted([a1, a2], reverse=True))
                outcomes.append(genotype)
        
        return outcomes
-------------------------- 
      #  예시:
          # DD x Dd의 경우
          #  부모1: DD → D, D
          #  부모2: Dd → D, d
          
         # 조합:
         # D(부모1) + D(부모2) = DD
         # D(부모1) + d(부모2) = Dd
         # D(부모1) + D(부모2) = DD
         # D(부모1) + d(부모2) = Dd
          
         # 결과: ['DD', 'Dd', 'DD', 'Dd']
         # 확률: DD 50%, Dd 50%


  6. 다인자 유전 예측 함수
    def predict_polygenic(p1, p2):
        """
        다인자 유전 형질 예측 (키, 피부색)
        여러 유전자가 관여하므로 중간값 경향
        """
        # 각 형질에 숫자 값 부여
        values = {
            'tall': 3, 'medium': 2, 'short': 1,
            'dark': 3, 'light': 1
        }
        
        # 평균값 계산
        avg = (values.get(p1, 2) + values.get(p2, 2)) / 2
        
        # 평균에 따라 결과 반환
        if avg >= 2.5:
            return ['높음/어두움']
        elif avg >= 1.5:
            return ['중간']
        return ['낮음/밝음']

----------------- 
      #  예시:
         # tall (3) + medium (2) = 평균 2.5 → '높음/어두움'
         # medium (2) + short (1) = 평균 1.5 → '중간'


  7. 표현형 결정 함수  
    def get_phenotype(genotype):
        """
        유전자형 → 표현형 변환
        
        매개변수:
            genotype: 'DD', 'Dd', 'dd' 등
        
        반환값:
            표현형 설명 문자열
        """
        # 다인자 유전인 경우
        if genotype in ['높음/어두움', '중간', '낮음/밝음']:
            return genotype
        
        # 단일 유전자: D가 있으면 우성 표현
        return '우성 형질 표현' if 'D' in genotype else '열성 형질 표현'


  8. 세션 상태 초기화
    if 'page' not in st.session_state:
        st.session_state.page = 'user'
    if 'user_data' not in st.session_state:
        st.session_state.user_data = {}
    if 'spouse_data' not in st.session_state:
        st.session_state.spouse_data = {}
  ------------------------------      
      # st.session_state: 페이지 새로고침해도 데이터 유지
      #  page: 현재 어느 단계인지 ('user', 'spouse', 'results')
      #  user_data, spouse_data: 입력한 형질 저장


  9. 메인 UI - 타이틀
    st.title("🧬 유전 형질 예측 프로그램")
    st.markdown("부모의 형질을 입력하여 자녀의 유전 형질을 예측해보세요!")
    st.markdown("---")
------------------------------
       # st.title(): 큰 제목
       # st.markdown(): 마크다운 문법 사용
       # ---: 구분선


  10. 사이드바 (진행 상황)
    with st.sidebar:
        st.header("📌 진행 상황")
        
        if st.session_state.page == 'user':
            st.info("**1단계:** 본인 형질 입력 중")
            st.markdown("⬜ 배우자 형질 입력")
            st.markdown("⬜ 결과 확인")
---------------------------------
       # with st.sidebar: 사이드바 영역
       # 현재 단계를 시각적으로 표시


  11. 본인 형질 입력 페이지
    if st.session_state.page == 'user':
        st.header("🙋 본인의 형질을 선택하세요")
        
        # 2열 레이아웃
        col1, col2 = st.columns(2)
        
        for i, trait in enumerate(traits_data):
            # 홀수는 왼쪽, 짝수는 오른쪽 열
            col = col1 if i % 2 == 0 else col2
            
            with col:
                st.subheader(f"🧬 {trait['name']}")
                st.caption(f"우성: {trait['dominant']} / 열성: {trait['recessive']}")
                
                # 드롭다운 메뉴
                selected = st.selectbox(
                    "선택하세요",
                    options=list(trait['options'].keys()),
                    key=f"user_{trait['id']}",  # 고유 키
                    label_visibility="collapsed"
                )
                
                # 선택된 유전자형 저장
                genotype = trait['options'][selected]
                st.caption(f"유전자형: `{genotype}`")
                st.session_state.user_data[trait['id']] = genotype
  --------------------------------
       # st.columns(2): 화면을 2개 열로 분할
       # st.selectbox(): 드롭다운 선택 메뉴
       # key: 각 위젯의 고유 식별자 (중복 방지)
       # enumerate(): 인덱스와 값을 동시에 가져옴


  12. 페이지 전환 버튼
    col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("▶️ 다음 단계 (배우자 입력)", type="primary"):
                st.session_state.page = 'spouse'  # 페이지 전환
                st.rerun()  # 페이지 새로고침
    -------------------------------
      #  st.columns([1, 2, 1]): 비율로 열 나누기 (중앙 정렬 효과)
      #  st.button(): 클릭 가능한 버튼
      #  type="primary": 강조 버튼 스타일
      #  st.rerun(): 즉시 화면 업데이트


  13. 배우자 형질 입력 페이지
    elif st.session_state.page == 'spouse':
        # 본인 입력과 동일한 구조
        # spouse_data에 저장
        # 이전/다음 버튼 모두 제공
    ----------------------
        # 본인 입력과 거의 동일하지만 spouse_data에 저장


  14. 결과 페이지 - 탭 구성
    elif st.session_state.page == 'results':
        st.header("👶 자녀 형질 예측 결과")
        
        # 탭으로 구성
        tab1, tab2 = st.tabs(["📊 상세 결과", "📋 요약"])
        
        with tab1:
            # 각 형질별 상세 결과
        
        with tab2:
            # 전체 요약
    -------------------------------
        # st.tabs(): 탭 UI 생성
        # 상세/요약 정보를 분리하여 표시


  15. 결과 계산 및 표시
    for trait in traits_data:
        trait_id = trait['id']
        user_gen = st.session_state.user_data[trait_id]
        spouse_gen = st.session_state.spouse_data[trait_id]
        
        # Punnett Square 계산
        outcomes = punnett_square(user_gen, spouse_gen)
        
        with st.expander(f"🧬 {trait['name']}", expanded=True):
            # 부모 유전자형 표시
            col1, col2, col3 = st.columns([1, 0.2, 1])
            with col1:
                st.info(f"**본인의 유전자형**\n\n`{user_gen}`")
            with col2:
                st.markdown("**×**")
            with col3:
                st.info(f"**배우자의 유전자형**\n\n`{spouse_gen}`")
            
            # 결과 계산
            if outcomes[0] not in ['높음/어두움', '중간', '낮음/밝음']:
                counts = Counter(outcomes)
                
                for genotype, count in counts.items():
                    prob = (count / len(outcomes)) * 100
                    phenotype = get_phenotype(genotype)
                    
                    # 프로그레스 바로 확률 표시
                    st.markdown(f"**{genotype}** ({phenotype})")
                    st.progress(prob / 100)
                    st.caption(f"확률: {prob:.1f}% ({count}/4)")
---------------------------------------------------
       # st.expander(): 접었다 펼 수 있는 섹션
       # Counter(outcomes): 각 유전자형이 몇 번 나타나는지 계산
       # st.progress(): 프로그레스 바로 확률 시각화
     # 계산 예시:
       # outcomes = ['DD', 'Dd', 'DD', 'Dd']
       # counts = Counter(outcomes)
       # # {'DD': 2, 'Dd': 2}
        
       # DD 확률 = 2/4 = 50%
       # Dd 확률 = 2/4 = 50%


  16. 요약 탭
    with tab2:
        st.subheader("📋 우성 형질 vs 열성 형질 요약")
        
        dominant_count = 0
        recessive_count = 0
        mixed_count = 0
        
        for trait in traits_data:
            # ... 계산
            if dominant_prob >= 0.75:
                dominant_count += 1
            elif dominant_prob <= 0.25:
                recessive_count += 1
            else:
                mixed_count += 1
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("우성 형질 우세", f"{dominant_count}개")
        with col2:
            st.metric("혼합/중간", f"{mixed_count}개")
        with col3:
            st.metric("열성 형질 우세", f"{recessive_count}개")
    ---------------
       # st.metric(): 숫자를 크게 표시하는 위젯
       # 전체 형질 중 우성/열성/혼합 비율 계산


4️⃣ 로컬 테스트(사용자에 따라 경로 상이)
  # 1. 가상환경 활성화
  conda activate genetics_env
  
  # 2. Streamlit 실행
  streamlit run genetics_app.py
  
  # 3. 브라우저에서 확인
  # http://localhost:8501


5️⃣ GitHub 업로드
    파일 구조
    Python_Project/
    ├── genetics_app.py      # 메인 코드
    ├── requirements.txt     # streamlit
    └── README.md           # 설명 (선택사항)
--------------------
    # GitHub에 업로드
       # GitHub 계정 생성
       # New repository: Python_Project
       # 파일 업로드


6️⃣ Streamlit Cloud 배포
  1. https://share.streamlit.io/ 접속
  2. GitHub 계정 연결
  3. Repository 선택: LeeSoomi/Python_Project
  4. Branch: main
  5. Main file path: genetics_app.py
  6. Deploy 클릭!

배포 완료
🌐 공개 URL:
https://pythonproject-qhatucfqscerbigseyfpfe.streamlit.app




